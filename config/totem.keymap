//
//                                                        ▀▀▀▀▀     ▀▀▀▀▀          ▀▀█▀▀
//                                                        ▄▀▀▀▄  ▄  ▄▀▀▀▄  ▄  ▄▀▀▀▄  █  ▄▀▀▀▄
//                                                        █   █  █  █   █  █  █   █  █  █   █
//                                                         ▀▀▀   █   ▀▀▀   █   ▀▀▀   ▀   ▀▀▀
//                                                               █      ▄▄▄█▄▄▄    █   █  
//                                                               ▀      █  █  █     █▄█
//                                                             ▀▀▀▀▀    █  █  █      ▀
//                                                                      ▀  ▀  ▀
//
// ▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄▄

#define MEH LC(LS(LALT))

// Custom

#include "keys/38.h"
#include <behaviors/num_word.dtsi>
#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/outputs.h>

// #include "includes/mods.dtsi"

#define BASE 0
#define NAV  1
#define SYM  2
#define ADJ  3
#define HM_TAPPING_TERM 300
#define HM_TAPPING_TERM_FAST 200
#define HM_PRIOR_IDLE 150

// &mt {
//     quick-tap-ms = <100>;
//     require-prior-idle-ms = <150>;
//     flavor = "tap-preferred";
//     tapping-term-ms = <170>;
// };

&lt {
    tapping-term-ms = <240>;
    flavor = "balanced";
    require-prior-idle-ms = <150>;
    quick-tap-ms = <175>;
};

&sl { release-after-ms = <3000>; };

/ {
    behaviors {
        // Positional Homerow mods
        // Homerow mods that prevent accidental activations when rolling keys,
        // such as when typing `st` or `ne` on colemak-dh layouts or `as` on
        // qwerty.
        //
        // Works by only allowing a mod to activate within tapping-term if
        // it's on the opposite side of the keyboard or on the same side thumb
        // keys.
        // Further optimization using urob's timerless homerow mods method:
        // https://github.com/urob/zmk-config#timeless-homerow-mods

        hm_l: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;                // repeat on tap-into-hold
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;
            hold-trigger-on-release;
        };

        hm_r: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM>;
            quick-tap-ms = <175>;
            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;
            hold-trigger-on-release;
        };

        // Positional Homerow mods for shift
        // Use faster tapping term and disable some features that may
        // cause false negatives.

        hm_shift_l: hm_shift_l {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;

            // replaced global-quick-tap

            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_R KEYS_T>;

            // hold-trigger-on-release;
        };

        hm_shift_r: hm_shift_r {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            bindings = <&kp>, <&kp>;

            flavor = "balanced";
            tapping-term-ms = <HM_TAPPING_TERM_FAST>;
            quick-tap-ms = <175>;

            // replaced global-quick-tap

            require-prior-idle-ms = <HM_PRIOR_IDLE>;
            hold-trigger-key-positions = <KEYS_L KEYS_T>;

            // hold-trigger-on-release;
        };

        // mods for thumb keys

        tm: tm {
            compatible = "zmk,behavior-hold-tap";
            label = "THUMB_MOD";
            flavor = "balanced";

            // how long a key must be pressed to trigger Hold behavior.

            tapping-term-ms = <250>;

            // press a tapped hold-tap again within quick-tap-ms milliseconds 
            // of the first press, it will always trigger the tap behavior.

            quick-tap-ms = <300>;

            // the tap behavior is triggered when releasing the hold-tap key 
            // if no other key was pressed in the meantime
            //retro-tap; // don't allow slow (hold-like) taps

            #binding-cells = <2>;
            bindings = <&mo>, <&kp>;
        };

        // trigger a mod morph for the accent when pressing escape

        tm_delete: tm_delete {
            compatible = "zmk,behavior-hold-tap";
            flavor = "tap-preferred";

            // how long a key must be pressed to trigger Hold behavior.

            tapping-term-ms = <250>;

            // press a tapped hold-tap again within quick-tap-ms milliseconds 
            // of the first press, it will always trigger the tap behavior.

            quick-tap-ms = <300>;

            // the tap behavior is triggered when releasing the hold-tap key 
            // if no other key was pressed in the meantime
            //retro-tap; // don't allow slow (hold-like) taps

            #binding-cells = <2>;
            bindings = <&mo>, <&bspc_del>;
        };

        hyper_num: hyper_num {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            // how long a key must be pressed to trigger Hold behavior.

            tapping-term-ms = <250>;

            // press a tapped hold-tap again within quick-tap-ms milliseconds 
            // of the first press, it will always trigger the tap behavior.

            quick-tap-ms = <300>;

            // the tap behavior is triggered when releasing the hold-tap key 
            // if no other key was pressed in the meantime
            //retro-tap; // don't allow slow (hold-like) taps

            #binding-cells = <2>;
            bindings = <&kp>, <&num_word>;
        };

        hyper_caps: hyper_caps {
            compatible = "zmk,behavior-hold-tap";
            flavor = "balanced";

            // how long a key must be pressed to trigger Hold behavior.

            tapping-term-ms = <250>;

            // press a tapped hold-tap again within quick-tap-ms milliseconds 
            // of the first press, it will always trigger the tap behavior.

            quick-tap-ms = <300>;

            // the tap behavior is triggered when releasing the hold-tap key 
            // if no other key was pressed in the meantime
            //retro-tap; // don't allow slow (hold-like) taps

            #binding-cells = <2>;
            bindings = <&kp>, <&caps_word>;
        };

        // trigger delete on backspace when shift is held

        bspc_del: bspc_del {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&kp BACKSPACE>, <&kp DELETE>;

            mods = <(MOD_LSFT|MOD_RSFT)>;
            keep-mods = <(MOD_RSFT)>;
        };

        // trigger delete on backspace when shift is held

        accent: accent {
            compatible = "zmk,behavior-mod-morph";
            #binding-cells = <0>;
            bindings = <&hm_l LGUI A>, <&kp LA(GRAVE)>;

            mods = <(MOD_LALT)>;
        };
    };
};

/ {
    combos {
        compatible = "zmk,combos";

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <2 3>;
            require-prior-idle-ms = <200>;
            timeout-ms = <40>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <7 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <40>;
        };

        left_brace {
            bindings = <&kp LEFT_BRACE>;
            key-positions = <1 3>;
            require-prior-idle-ms = <200>;
            timeout-ms = <60>;
        };

        right_brace {
            bindings = <&kp RIGHT_BRACE>;
            key-positions = <8 6>;
            require-prior-idle-ms = <200>;
            timeout-ms = <60>;
        };

        underscore {
            bindings = <&kp UNDERSCORE>;
            key-positions = <21 30>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        single_quotes {
            bindings = <&kp SINGLE_QUOTE>;
            key-positions = <12 17>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        quotes {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <11 18>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        left_parent {
            bindings = <&kp LEFT_PARENTHESIS>;
            key-positions = <2 1>;
            require-prior-idle-ms = <200>;
            timeout-ms = <40>;
        };

        right_parent {
            bindings = <&kp RIGHT_PARENTHESIS>;
            key-positions = <7 8>;
            require-prior-idle-ms = <200>;
            timeout-ms = <40>;
        };

        backtick {
            bindings = <&kp GRAVE>;
            key-positions = <13 16>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        leader_software {
            bindings = <&select_line>;
            key-positions = <32 37>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        number {
            bindings = <&hyper_num LS(LA(LC(LEFT_GUI))) 2>;
            key-positions = <33 36>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        dash2 {
            bindings = <&kp MINUS>;
            key-positions = <10 19>;
            require-prior-idle-ms = <150>;
            timeout-ms = <60>;
        };

        copy {
            bindings = <&kp LG(C)>;
            key-positions = <22 23>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        paste {
            bindings = <&kp LG(V)>;
            key-positions = <23 24>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        clipboard {
            bindings = <&kp LG(LS(V))>;
            key-positions = <22 23 24>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <20 31>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <0 9>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        exclamation {
            bindings = <&kp EXCLAMATION>;
            key-positions = <24 27>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        at_sign {
            bindings = <&kp AT_SIGN>;
            key-positions = <23 28>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <22 29>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        xor {
            bindings = <&kp CARET>;
            key-positions = <4 5>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <25 26>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };

        and {
            bindings = <&kp AMPERSAND>;
            key-positions = <14 15>;
            require-prior-idle-ms = <150>;
            timeout-ms = <70>;
        };
    };

    macros {
        select_line: new_macro {
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp HOME &kp LS(END)>;
            label = "NEW_MACRO";
        };
    };

    keymap {
        compatible = "zmk,keymap";

        base_layer {
            label = "BASE";
            bindings = <
                                   &kp Q    &kp W         &kp E          &kp R                 &kp T        &kp Y      &kp U                 &kp I          &kp O         &kp P
                                   &accent  &hm_l LALT S  &hm_l LCTRL D  &hm_shift_l LSHIFT F  &kp G        &kp H      &hm_shift_r LSHIFT J  &hm_r LCTRL K  &hm_r LALT L  &hm_r LGUI SEMI
&hyper_num LS(LA(LC(LEFT_GUI))) 2  &kp Z    &kp X         &kp C          &kp V                 &kp B        &kp N      &kp M                 &kp COMMA      &kp PERIOD    &kp FSLH         &hyper_caps LS(LA(LC(LEFT_GUI))) 0
                                                          &tm 3 ESCAPE   &tm_delete 1 0        &tm 2 TAB    &kp ENTER  &tm 6 SPACE           &tm 4 DELETE
            >;
        };

        nav {
            bindings = <
        &trans  &kp LA(LG(LEFT_ARROW))  &kp LG(W)          &kp LA(LG(RIGHT))  &kp LG(T)    &kp HOME        &kp LS(LA(LG(LC(U))))  &kp LS(LA(LC(LG(E))))      &kp LG(LC(LA(LS(O))))  &trans
        &trans  &trans                  &trans             &trans             &trans       &kp LEFT_ARROW  &kp DOWN               &kp UP_ARROW               &kp RIGHT              &trans
&trans  &trans  &kp LG(LS(J))           &kp LG(LS(SLASH))  &kp LG(LS(SPACE))  &trans       &kp END         &kp PAGE_DOWN          &kp PAGE_UP                &trans                 &trans  &trans
                                        &trans             &trans             &trans       &kt F17         &kp LG(SPACE)          &kp LS(LA(LC(LG(ENTER))))
            >;
        };

        num {
            bindings = <
        &trans  &trans        &trans     &trans      &trans    &kp ASTERISK  &kp N7        &kp N8         &kp N9        &kp PLUS
        &trans  &trans        &trans     &trans      &trans    &kp PERIOD    &kp NUMBER_4  &kp N5         &kp NUMBER_6  &kp MINUS
&trans  &trans  &kp ASTERISK  &kp COMMA  &kp PERIOD  &trans    &kp COMMA     &kp NUMBER_1  &kp NUMBER_2   &kp NUMBER_3  &kp EQUAL  &kp EQUAL
                              &trans     &trans      &trans    &sl 5         &kp N0        &kp BACKSPACE
            >;
        };

        symb_right {
            bindings = <
       &trans  &trans         &trans     &kp LG(LS(NUMBER_4))  &trans    &kp CARET      &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
       &trans  &kp LG(LS(V))  &kp LG(C)  &kp LG(V)             &trans    &kp PLUS       &kp LEFT_BRACE    &kp RIGHT_BRACE    &kp EQUAL             &kp MINUS
&sl 7  &trans  &trans         &trans     &trans                &trans    &kp BACKSLASH  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp PIPE              &kp UNDERSCORE         &kp SQT
                              &trans     &trans                &trans    &trans         &trans            &trans
            >;
        };

        symb_left {
            bindings = <
        &kp EXCLAMATION  &kp DOUBLE_QUOTES  &kp HASH  &kp DOLLAR  &kp PERCENT         &trans  &trans  &trans  &trans  &trans
        &kp GRAVE        &kp SQT            &kp AT    &kp SQT     &kp LA(NUMBER_3)    &trans  &trans  &trans  &trans  &trans
&trans  &kp TILDE        &trans             &trans    &trans      &trans              &trans  &trans  &trans  &trans  &trans  &trans
                                            &trans    &trans      &trans              &trans  &trans  &trans
            >;
        };

        function {
            bindings = <
        &trans  &trans  &trans  &trans  &trans    &trans  &kp F7  &kp F8  &kp F9  &kp F10
        &trans  &trans  &trans  &trans  &trans    &trans  &kp F4  &kp F5  &kp F6  &kp F11
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &kp F1  &kp F2  &kp F3  &kp F12  &trans
                        &trans  &trans  &trans    &trans  &trans  &trans
            >;
        };

        media {
            bindings = <
       &kp C_VOLUME_UP  &trans  &trans  &trans             &trans           &trans  &kp C_REWIND  &trans            &kp C_FAST_FORWARD  &trans
       &kp K_MUTE       &trans  &trans  &kp LG(LA(LC(Z)))  &kp LA(LS(A))    &trans  &kp C_PREV    &kp C_PLAY_PAUSE  &kp C_NEXT          &trans
&sl 7  &kp C_VOL_DN     &trans  &trans  &trans             &trans           &trans  &trans        &trans            &trans              &trans  &trans
                                &trans  &trans             &trans           &trans  &trans        &trans
            >;
        };

        internals {
            bindings = <
        &ext_power EP_TOG  &bootloader   &sys_reset  &soft_off  &bt BT_NXT    &bt BT_SEL 0  &trans  &bt BT_CLR_ALL  &trans  &trans
        &trans             &out OUT_TOG  &trans      &trans     &bt BT_PRV    &bt BT_SEL 1  &trans  &trans          &trans  &trans
&trans  &trans             &trans        &trans      &trans     &bt BT_CLR    &bt BT_SEL 2  &trans  &trans          &trans  &trans  &trans
                                         &trans      &trans     &trans        &trans        &trans  &trans
            >;
        };

        num_right {
            bindings = <
        &trans  &trans  &trans                &trans                 &trans    &kp ASTERISK   &kp N7        &kp N8        &kp N9        &kp PLUS
        &trans  &trans  &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &trans    &kp PERIOD     &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp MINUS
&trans  &trans  &trans  &trans                &trans                 &trans    &kp COMMA      &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp EQUAL  &trans
                        &trans                &trans                 &trans    &kp BACKSPACE  &kp N0        &kp LEFT_GUI
            >;
        };
    };
};
